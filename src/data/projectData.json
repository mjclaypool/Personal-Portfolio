[
  {
    "id": "finance",
    "linkUrl": "/finance/",
    "cardImg": "./assets/case-study--finance-overview.png",
    "cardAlt": "Finance website screenshot",
    "cardTitle": "Personal Finance App",
    "cardDescription": "A highly interactive personal finance application using TypeScript, React.js, Tailwind CSS and Chart.js.",
    "caseStudyTitle": "Personal Finance Case Study",
    "tagLine": "A responsive, interactive personal finance application using TypeScript, React.js, Tailwind CSS and Chart.js.",
    "objective": "Per the design brief from Frontend Mentor, build a webpage that allows users to:",
    "requirements": [
      "See all of the personal finance app data at-a-glance on the overview page.",
      "View all transactions on the transactions page with pagination for every ten transactions.",
      "Search, sort, and filter transactions.",
      "Create, read, update, delete (CRUD) budgets and saving pots.",
      "View the latest three transactions for each budget category created.",
      "View progress towards each pot.",
      "Add money to and withdraw money from pots.",
      "View recurring bills and the status of each for the current month.",
      "Search and sort recurring bills.",
      "Receive validation messages if required form fields aren't completed.",
      "Navigate the whole app and perform all actions using only their keyboard.",
      "View the optimal layout for the interface depending on their device's screen size.",
      "See hover and focus states for all interactive elements on the page."
    ],
    "learnings": [
      {
        "title": "Make data accessible throughout application with context",
        "insight": "Since the JSON data of account balances, transactions, budgets and pots are accessed on multiple levels throughout the application, I used context to provide pages and components with a single source of truth. With the createContext hook, I imported the JSON data, created constant variables of balances and transactions, and initialized state variables of budgets and pots. By providing these variables and relevant state updating functions to the full app, all pages are ensured to reflect the latest additions, updates, or deletions of state data."
      },
      {
        "title": "Define reusable and configurable UI components",
        "insight": "With repeated styling calls across multiple components, like the white background with fixed padding and rounded corners for almost every component, one of my main focuses for this project was on building reusable wrappers and UI components. I defined props to handle variants of dropdowns, buttons and section headings, and I am continuing to refine my component tree and improve code readability."
      },
      {
        "title": "Create cohesive search, sort, and filter elements",
        "insight": "For the Transactions and Recurring Bills pages, I used context again to ensure any combination of search, sort, and filtering inputs would be reflected in the search results. I created a utility file and defined functions to help with these operations, from relatively straightforward search and filter functions to multiple bubble sorting algorithms to handle the different sorting options."
      },
      {
        "title": "Build budgets doughnut chart using Chart.js",
        "insight": "I wanted to gain experience using a good data visualization library, so I used Chart.js to build my budgets doughnut chart. Although this was only one component in my application, I really liked how configurable and easy-to-use the chart was. I am definitely looking forward to finding more use cases for Chart.js in future projects."
      },
      {
        "title": "Handle page navigation with HashRouter, Links, useEffect and useLocation",
        "insight": "As with all projects I deploy to GitHub Pages, I set up my project with HashRouter and Links to navigate between the pages of my application. However, I initially ran into an issue where refreshing on any page would disconnect the page per the URL and page stored in context. I had been updating the page in context whenever a Link was clicked, but, after realizing that refreshing the page resets the context, I decided to pivot to changing the page in context whenever the URL changes. By using the pathname of useLocation as a dependency for my useEffect hook, I was able to ensure that the app always knows its current page."
      }
    ],
    "image": "./assets/case-study--finance.png",
    "altText": "Laptop mock-up of personal finance app design.",
    "screenshots": [
      "./assets/case-study--finance-overview.png",
      "./assets/case-study--finance-transactions.png",
      "./assets/case-study--finance-budgets.png",
      "./assets/case-study--finance-pots.png",
      "./assets/case-study--finance-recurring.png"
    ],
    "repoLink": "https://github.com/mjclaypool/Personal-Finance-App",
    "liveLink": "https://mjclaypool.github.io/Personal-Finance-App/"
  },
  {
    "id": "audiophile-website",
    "linkUrl": "/audiophile-website/",
    "cardImg": "./assets/case-study--audiophile-homepage.png",
    "cardAlt": "Audiophile website screenshot.",
    "cardTitle": "Audiophile Website",
    "cardDescription": "A responsive, pixel-perfect website for a fictional e-commerce company using TypeScript and React.js.",
    "caseStudyTitle": "Audiophile Website Case Study",
    "tagLine": "An interactive, scalable e-commerce website with pixel-perfect styling.",
    "objective": "Provided with a Figma design file, build a Audiophile e-commerce website that empowers users to:",
    "requirements": [
      "View the optimal layout for the app depending on their device's screen size.",
      "Add/Remove products from the cart.",
      "Edit product quantities in the cart.",
      "Fill in all fields in the checkout.",
      "See correct checkout totals depending on the products in the cart.",
      "See an order confirmation modal after checking out with an order summary."
    ],
    "learnings": [
      {
        "title": "Define SPA routing with React Router DOM",
        "insight": "Created routing between the homepage, category pages, product pages, and checkout page with HashRouter (since BrowserRouter is not compatible with GitHub Pages). Used Link to connect navigation links and CTAs to their respective pages, and used the useParams hook to build a back button to move up from product pages to their respective category page. With dynamic path parameters, this e-commerce site could easily be scaled up with more products by simply adding more objects to the JSON data file."
      },
      {
        "title": "Use context to manage shared state",
        "insight": "Created two context providers to manage shared state across the site: CartContext and UserProgressContext. The CartContext manages adding items to the cart from the product pages, removing items from inside the cart modal, and updating quantities of products from both locations. The UserProgressContext then handles the user's movement throughout the main site and modals such as the mobile navigation menu, cart, and checkout confirmation. It also performs a validation check on the checkout form, preventing the user from progressing to the checkout confirmation before completing all of the required fields."
      },
      {
        "title": "Develop useful client-side form validation",
        "insight": "Setting users up for success with informative error messages is critical in preventing frustration and improving the overall user experience. For this form, I set up regex patterns to make sure user inputs matched valid formats for email addresses, phone numbers, and payment details, and I defined a general validation check to make sure no field is left empty. I set error messages to only be displayed to the user after they click away from the input field, giving them a chance to fill out the form correctly before being guided towards a valid input as needed. The submit button them becomes clickable only after all fields are validated, which is important for maintaining user trust particularly when handling their payment information."
      },
      {
        "title": "Incorporate Tailwind CSS styling",
        "insight": "Practiced using the popular CSS framework, Tailwind CSS, to bolster maintainability and speed of implementing future updates. Gained experience using responsive utility variants, and looking forward to learning more about directives and reusing styles."
      }
    ],
    "image": "./assets/case-study--audiophile.png",
    "altText": "Laptop mock-up of the Little Lemon restaurant website.",
    "screenshots": [
      "./assets/case-study--audiophile-homepage.png",
      "./assets/case-study--audiophile-category.png",
      "./assets/case-study--audiophile-product.png",
      "./assets/case-study--audiophile-cart.png",
      "./assets/case-study--audiophile-checkout.png"
    ],
    "repoLink": "https://github.com/mjclaypool/Audiophile-Website",
    "liveLink": "https://mjclaypool.github.io/Audiophile-Website/"
  },
  {
    "id": "portfolio",
    "linkUrl": "/portfolio/",
    "cardImg": "./assets/case-study--portfolio-homepage.png",
    "cardAlt": "Personal portfolio website screenshot",
    "cardTitle": "Personal Portfolio",
    "cardDescription": "A responsive, interactive portfolio website using React.js and Framer Motion that highlights my design and development skills.",
    "caseStudyTitle": "Portfolio Case Study",
    "tagLine": "An interactive personal portfolio that showcases my skills as a front-end software developer.",
    "objective": "Design and build an engaging portfolio website that allows users to:",
    "requirements": [
      "See 'Hero', 'Projects', 'Exercises', and 'About' sections on the homepage.",
      "Use links in the header and footer to navigate to their respective content sections.",
      "View individual project and exercise case studies via their links on the homepage.",
      "Interact with education, work experience, and continuous learning content in the 'About' section.",
      "Connect via the LinkedIn and GitHub links in the footer section."
    ],
    "learnings": [
      {
        "title": "Ensure the site is enjoyable and functional across browsers and devices.",
        "insight": "With a wide variety of screen and browser options for visiting a webpage, responsive web design is critical for delivering an uncompromised user experience across all viewports. To mitigate potential compatibility issues, I tested my application early and often on multiple browsers and devices, using browser dev tools to help identify and fix problems along the way. Additionally, I verified that all functionality is accessible via keyboard navigation and non-text content includes text alternatives to promote inclusivity of all abilities and assistive devices."
      },
      {
        "title": "Create and efficiently call upon JSON data files.",
        "insight": "Moving data out of individual pages and component files leads to leaner components, improves ease of making formatting changes and adding new content, and reduces time spent on debugging across multiple layers of a file structure. Having created reusable elements for the 'About' section and case study page, I can easily add topics or swap out case studies without needing to manipulate any components or add any pages."
      },
      {
        "title": "Define SPA routing with React Router DOM",
        "insight": "To integrate the reusable case study page as a child path, I wrapped the router with context and utilized the useParams hook to make page connections, load the targeted data, and prevent refresh errors. However, when I deployed the project to GitHub Pages, I realized I could not refresh pages other than the homepage without getting a GitHub 404 error. I quickly learned that GitHub Pages cannot handle dynamic routing of SPAs with browser routing, so I switched to hash routing since it does not require server-side support. In doing so, I enjoyed picking up new experiences in structuring SPAs, and I look forward to learning more about React router components and hooks for future projects."
      },
      {
        "title": "Incorporate animations, effects, and a custom error page",
        "insight": "To make this portfolio website fun and engaging, I added animations to highlight hovered/focused elements, applied smooth transitions to scrolling and user-selected components, and created a custom 404 error page. For animations, I tried out motion components from the Framer Motion library to style elements entering the viewport and enhance the feel of interactive elements."
      }
    ],
    "image": "./assets/case-study--portfolio.png",
    "altText": "Laptop mock-up of final portfolio design.",
    "screenshots": [
      "./assets/case-study--portfolio-homepage-full.png",
      "./assets/case-study--portfolio-about.png",
      "./assets/case-study--portfolio-case-study.png",
      "./assets/case-study--portfolio-error-page.png"
    ],
    "repoLink": "https://github.com/mjclaypool/Personal-Portfolio",
    "liveLink": "https://mjclaypool.github.io/Personal-Portfolio/"
  }
]